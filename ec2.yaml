AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation For VPC'

Resources: 
 MyVPC: 
   Type: 'AWS::EC2::VPC' 
   Properties: 
     CidrBlock: '172.16.0.0/16'
     EnableDnsSupport: true 
     EnableDnsHostnames: true 
     Tags: 
       - Key: Name
         Value: MyVPC

  #PUBLIC SUBNET IN AZ1 
 PublicSubnet1A: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.1.0/24'
     AvailabilityZone: !Select [0, !GetAZs '']
     MapPublicIpOnLaunch: true 
     Tags: 
       - Key: Name 
         Value: PublicSubnet1A 

 # APP PRIVATE SUBNET IN AZ1 
 AppPrivateSubnet1A: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.2.0/24'
     AvailabilityZone: !Select [0, !GetAZs '']
     Tags: 
       - Key: Name
         Value: AppPrivateSubnet1A

 # DATA PRIVATE SUBNET IN AZ1 
 DataPrivateSubnet1A: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.3.0/24'
     AvailabilityZone: !Select [0, !GetAZs '']
     Tags: 
       - Key: Name
         Value: DataPrivateSubnet1A


 #PUBLIC SUBNET IN AZ 2
 PublicSubnet2B: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.4.0/24'
     AvailabilityZone: !Select [1, !GetAZs '']
     MapPublicIpOnLaunch: true 
     Tags: 
       - Key: Name 
         Value: PublicSubnet2B 


# APP PRIVATE SUBNET IN AZ 2
 AppPrivateSubnet2B: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.5.0/24'
     AvailabilityZone: !Select [1, !GetAZs '']
     Tags: 
       - Key: Name
         Value: AppPrivateSubnet2B

 # DATA PRIVATE SUBNET IN AZ 2
 DataPrivateSubnet2B: 
   Type: 'AWS::EC2::Subnet'
   Properties: 
     VpcId: !Ref MyVPC 
     CidrBlock: '172.16.6.0/24'
     AvailabilityZone: !Select [1, !GetAZs '']
     Tags: 
       - Key: Name
         Value: DataPrivateSubnet2B 

# INTERNET GATEWAY IGW 
 InternetGateway: 
   Type: 'AWS::EC2::InternetGateway'
   Properties: 
     Tags: 
       - Key: Name 
         Value: MyVPC-IGW 


  # ATTACH GATEWAY 
 AttachGateway: 
   Type: 'AWS::EC2::VPCGatewayAttachment'
   Properties: 
     VpcId: !Ref MyVPC 
     InternetGatewayId: !Ref InternetGateway 




# PUBLIC ROUTE TABLE 
 PublicRouteTable:
   Type: 'AWS::EC2::RouteTable'
   Properties: 
     VpcId: !Ref MyVPC 
     Tags: 
       - Key: Name 
         Value:  PublicRouteTable 

# PUBLIC ROUTE 
 PublicRoute: 
   Type: 'AWS::EC2::Route'
   DependsOn: AttachGateway 
   Properties: 
     RouteTableId: !Ref PublicRouteTable 
     DestinationCidrBlock: '0.0.0.0/0'
     GatewayId: !Ref InternetGateway 


#PUBLICSUBNETASSOCIATION 
 PublicSubnet1ARouteTableAssociation: 
   Type: 'AWS::EC2::SubnetRouteTableAssociation'
   Properties: 
     SubnetId: !Ref PublicSubnet1A
     RouteTableId: !Ref PublicRouteTable


# add ALB 
 MyLoadBalancer: 
   Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
   Properties: 
     Subnets: 
       - !Ref PublicSubnet1A
       - !Ref PublicSubnet2B 
     SecurityGroups:
       - !Ref WebServerSecurityGroup 


#TARGET GROUP FOR ALB
 MyTargetGroup: 
   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
   Properties: 
     VpcId: !Ref MyVPC 
     Port: 80 
     Protocol: 'HTTP'
     Targets: 
       - Id: !Ref WebServerInstance1A
       - Id: !Ref WebServerInstance2B

# LISTENER FOR ALB 
 MyListener: 
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties: 
     DefaultActions: 
       - Type: 'forward'
         TargetGroupArn: !Ref MyTargetGroup
     LoadBalancerArn: !Ref MyLoadBalancer
     Port: 80
     Protocol: 'HTTP'
     

# SECURITY GROUP
 WebServerSecurityGroup: 
   Type: 'AWS::EC2::SecurityGroup'
   Properties: 
     GroupDescription: 'Enable HTTP Access'
     VpcId: !Ref MyVPC
     SecurityGroupIngress: 
       - IpProtocol: 'tcp'
         FromPort: '80'
         ToPort: '80'
         CidrIp: '0.0.0.0/0'
         

#WebServerInstance1A
 WebServerInstance1A: 
   Type: 'AWS::EC2::Instance'
   Properties: 
     InstanceType: 't2.micro'
     ImageId: ami-053a45fff0a704a47 
     SubnetId: !Ref PublicSubnet1A
     SecurityGroupIds: 
       - !Ref WebServerSecurityGroup 
     Tags:
       - Key: 'Name'
         Value: 'WebServerInstance1A' 
     UserData: 
       Fn::Base64: !Sub | 
         #!/bin/bash
         yum install -y httpd
         systemctl start httpd 
         systemctl enable httpd 
         echo "Hello from My Web Server 1A" > /var/www/html/index.html
       #this code script uses UserData to install apachy web server with 
       # the yum package manager

# WebServerInstance2B
 WebServerInstance2B: 
   Type: 'AWS::EC2::Instance'
   Properties: 
     InstanceType: 't2.micro'
     ImageId: ami-053a45fff0a704a47 
     SubnetId: !Ref PublicSubnet2B
     SecurityGroupIds: 
       - !Ref WebServerSecurityGroup 
     Tags:
       - Key: 'Name'
         Value: 'WebServerInstance2B' 
     UserData: 
       Fn::Base64: !Sub | 
         #!/bin/bash
         yum install -y httpd
         systemctl start httpd 
         systemctl enable httpd 
         echo "Hello from My Web Server 1A" > /var/www/html/index.html
     